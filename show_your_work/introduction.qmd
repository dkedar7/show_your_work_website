---
title: "Introduction"
---

## Inspiration

The tutorial title draws inspiration from Austin Kleon's book "Show your work" and my own journey in web development. After building dozens of applications for research and industry, I've learned that the most impactful work is the work that gets shared, used, and built upon by others.

> *It sounds a little extreme, but in this day and age, if your work isn’t online, it doesn’t exist. We all have the opportunity to use our voices, to have our say, but so many of us are wasting it. If you want people to know about what you do and the things you care about, you have to share.*

Throughout this tutorial, I'll share examples from my app portfolio and show you exactly what you can expect to build—from simple data visualizations to interactive research tools that colleagues actually want to use.

## Web apps matter for your work

Building web applications isn't just about coding; it's about **communication**. When you transform your analysis from a static report into an interactive experience, several powerful things happen:

### **Inspires more communication, confidence, and trust**
Interactive applications let stakeholders explore your work themselves. When colleagues can adjust parameters, filter data, and see results change in real-time, they develop deeper understanding and confidence in your methods.

### **Speeds up your projects**  
Instead of generating dozens of static plots for different scenarios, create one interactive dashboard that generates insights on demand. What used to take hours of back-and-forth emails now happens in minutes of exploration.

### **Brings clarity of thought**
Building an interface forces you to think clearly about your work—much like writing. You must organize your logic, anticipate user needs, and structure your analysis in ways that make sense to others. This process often reveals insights you missed in the original analysis.

### **Increases accessibility and adoption**
Web applications remove barriers to using your work. Colleagues don't need Python installed, don't need to understand your code, and don't need to recreate your environment. They just click a link and explore.

> **Remember**: Work not shown is work lost. Showing your work in this context isn't about showing off—it's about better communication and broader impact.

## Tutorial Focus: Research-Ready Applications

This tutorial focuses on what I call **Research-Ready Applications**—the sweet spot between quick prototypes and enterprise software. These correspond to **Levels 0-2** in the web application maturity framework:

### The 5 Levels of Web Application Maturity

| Level | Description | Timeline | Users | Purpose |
|-------|-------------|----------|-------|---------|
| **0** | Exploratory Scripts | Hours-Days | 1 (you) | Personal analysis |
| **1** | Hobby Projects | Days-Weeks | 1-5 | Learning, sharing with close colleagues |
| **2** | Proof-of-Concept | Weeks-Months | 5-50 | Validate ideas, secure funding |
| **3** | Internal Production | Months-Years | 50-500 | Regular use by research community |
| **4** | Public Production | Years+ | 500+ | Serve broader scientific community |

### Why focus on levels 0-2?

**Every successful application starts here.** Even the most sophisticated research platforms (Levels 3-5) must first prove their value through effective prototypes. This tutorial teaches you to build applications that:

- Demonstrate your ideas effectively
- Convince stakeholders and collaborators  
- Secure funding and support
- Provide the foundation for larger projects

### Two common mistakes to avoid

**Over-engineering**: Building Level 4 infrastructure when you need Level 2 functionality
- Don't spend months setting up Kubernetes clusters for a research demo
- Avoid enterprise authentication systems for internal team tools
- Skip complex databases when CSV files work fine

**Under-engineering**: Using Level 1 tools when you have Level 3+ requirements  
- Don't use Jupyter notebooks for department-wide dashboards
- Avoid personal prototyping tools for external stakeholder presentations
- Don't ignore security for applications handling sensitive data

The key is **matching your tool to your actual needs**, not your aspirational requirements.

## What we'll Learn

By the end of this tutorial, we'll be able to:

- Choose the right Python framework for your specific needs
- Build interactive dashboards that colleagues actually use
- Deploy applications that work reliably for your research community
- Avoid common pitfalls that derail scientific software projects
- Transform static analyses into engaging, explorable experiences

## Conclusion

**Work not seen is work lost.** In our interconnected research environment, the most brilliant analysis has no impact if it remains locked in personal notebooks or buried in static reports.

Web applications aren't just tools—they're **trust builders**. When you make your work interactive and accessible, you invite collaboration, demonstrate transparency, and make it easy for others to build on your ideas.

Your research deserves to be seen, understood, and used. Let's build applications that make that happen.

---

*Ready to transform your research from hidden work to shared impact? Let's start building.*